{
  "service": {
    "service": "serverless-api",
    "serviceObject": {
      "name": "serverless-api"
    },
    "provider": {
      "stage": "dev",
      "region": "ap-northeast-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "nodejs6.10",
      "environment": {
        "DYNAMODB_TABLE": "serverless-api-dev",
        "IOT_ENDPOINT_HOST": "a1oyblg053arn8.iot.ap-northeast-1.amazonaws.com"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:ap-northeast-1:*:table/serverless-api-dev"
        },
        {
          "Effect": "Allow",
          "Action": [
            "iot:Connect",
            "iot:Publish",
            "iot:Subscribe",
            "iot:Receive"
          ],
          "Resource": "*"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          },
          "IndexLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-api-dev-index"
            }
          },
          "SignLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-api-dev-sign"
            }
          },
          "PublishLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-api-dev-publish"
            }
          },
          "ProcessLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-api-dev-process"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "serverless-api",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-api-dev-index:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-api-dev-sign:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-api-dev-publish:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-api-dev-process:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-api-dev-index:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-api-dev-sign:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-api-dev-publish:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-api-dev-process:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "kinesis:GetRecords",
                          "kinesis:GetShardIterator",
                          "kinesis:DescribeStream",
                          "kinesis:ListStreams"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "KinesisStream",
                              "Arn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "kinesis:GetRecords",
                          "kinesis:GetShardIterator",
                          "kinesis:DescribeStream",
                          "kinesis:ListStreams"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "KinesisStream",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-api",
                    "dev",
                    "ap-northeast-1",
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "IndexLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-api/dev/1536654814335-2018-09-11T08:33:34.335Z/serverless-api.zip"
              },
              "FunctionName": "serverless-api-dev-index",
              "Handler": "index.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs6.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "serverless-api-dev",
                  "IOT_ENDPOINT_HOST": "a1oyblg053arn8.iot.ap-northeast-1.amazonaws.com"
                }
              }
            },
            "DependsOn": [
              "IndexLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "IndexLambdaVersionKFwajSpS6ooXfddPKJoETr0NwgS0pH5eMFMtzmkXTg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IndexLambdaFunction"
              },
              "CodeSha256": "xKQ8SphaSLgQQ+/PhyjJKXuJCYbFqGbRJVrjK3FGNj0="
            }
          },
          "SignLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-api/dev/1536654814335-2018-09-11T08:33:34.335Z/serverless-api.zip"
              },
              "FunctionName": "serverless-api-dev-sign",
              "Handler": "sign.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs6.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "serverless-api-dev",
                  "IOT_ENDPOINT_HOST": "a1oyblg053arn8.iot.ap-northeast-1.amazonaws.com",
                  "IOT_AWS_REGION": "ap-northeast-1"
                }
              }
            },
            "DependsOn": [
              "SignLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "SignLambdaVersionTTsVvRn5jD2kSe4w7bczJ3LssUpdCr1rigRIRosYkKg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignLambdaFunction"
              },
              "CodeSha256": "xKQ8SphaSLgQQ+/PhyjJKXuJCYbFqGbRJVrjK3FGNj0="
            }
          },
          "PublishLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-api/dev/1536654814335-2018-09-11T08:33:34.335Z/serverless-api.zip"
              },
              "FunctionName": "serverless-api-dev-publish",
              "Handler": "publish.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs6.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "serverless-api-dev",
                  "IOT_ENDPOINT_HOST": "a1oyblg053arn8.iot.ap-northeast-1.amazonaws.com"
                }
              }
            },
            "DependsOn": [
              "PublishLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "PublishLambdaVersionPSpx3E7LCS6c8SJsa3oqpcyBCuGO2F3Ix0UFPC8to": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PublishLambdaFunction"
              },
              "CodeSha256": "xKQ8SphaSLgQQ+/PhyjJKXuJCYbFqGbRJVrjK3FGNj0="
            }
          },
          "ProcessLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-api/dev/1536654814335-2018-09-11T08:33:34.335Z/serverless-api.zip"
              },
              "FunctionName": "serverless-api-dev-process",
              "Handler": "process.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs6.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_TABLE": "serverless-api-dev",
                  "IOT_ENDPOINT_HOST": "a1oyblg053arn8.iot.ap-northeast-1.amazonaws.com"
                }
              }
            },
            "DependsOn": [
              "ProcessLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "ProcessLambdaVersionefFdaub45s2GORzBSynsfQEPfDhIzNodWi302iD3k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProcessLambdaFunction"
              },
              "CodeSha256": "xKQ8SphaSLgQQ+/PhyjJKXuJCYbFqGbRJVrjK3FGNj0="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-serverless-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceDemo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "demo",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDemoIndex": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDemo"
              },
              "PathPart": "index",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDemoSign": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDemo"
              },
              "PathPart": "sign",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDemoIndexOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDemoIndex"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDemoSignOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDemoSign"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDemoIndexGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDemoIndex"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "1Underscore1NS2V20GyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IndexLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "1Underscore1NS2V20GyApiGatewayAuthorizer"
          },
          "ApiGatewayMethodDemoSignGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDemoSign"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "1Underscore1NS2V20GyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "1Underscore1NS2V20GyApiGatewayAuthorizer"
          },
          "1Underscore1NS2V20GyApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "1_1NS2V20Gy",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                {
                  "Fn::Sub": "arn:aws:cognito-idp:ap-northeast-1:${AWS::AccountId}:userpool/ap-northeast-1_1NS2V20Gy"
                }
              ]
            }
          },
          "ApiGatewayDeployment1536654814361": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodDemoIndexOptions",
              "ApiGatewayMethodDemoSignOptions",
              "ApiGatewayMethodDemoIndexGet",
              "ApiGatewayMethodDemoSignGet"
            ]
          },
          "IndexLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IndexLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PublishEventSourceMappingKinesisKinesisStream": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": "IamRoleLambdaExecution",
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "KinesisStream",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "PublishLambdaFunction",
                  "Arn"
                ]
              },
              "StartingPosition": "TRIM_HORIZON",
              "Enabled": "True"
            }
          },
          "ProcessEventSourceMappingKinesisKinesisStream": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": "IamRoleLambdaExecution",
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "KinesisStream",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProcessLambdaFunction",
                  "Arn"
                ]
              },
              "StartingPosition": "TRIM_HORIZON",
              "Enabled": "True"
            }
          },
          "WriteKinesisRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "iot.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"
              ]
            }
          },
          "TopicRule": {
            "Type": "AWS::IoT::TopicRule",
            "Properties": {
              "TopicRulePayload": {
                "RuleDisabled": false,
                "Sql": "SELECT * FROM 'myTopic'",
                "Actions": [
                  {
                    "Kinesis": {
                      "RoleArn": {
                        "Fn::GetAtt": [
                          "WriteKinesisRole",
                          "Arn"
                        ]
                      },
                      "StreamName": "serverless-api-stream"
                    }
                  }
                ]
              }
            }
          },
          "KinesisStream": {
            "Type": "AWS::Kinesis::Stream",
            "Properties": {
              "Name": "serverless-api-stream",
              "ShardCount": 1
            }
          },
          "usersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "serverless-api-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "IndexLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IndexLambdaVersionKFwajSpS6ooXfddPKJoETr0NwgS0pH5eMFMtzmkXTg"
            }
          },
          "SignLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignLambdaVersionTTsVvRn5jD2kSe4w7bczJ3LssUpdCr1rigRIRosYkKg"
            }
          },
          "PublishLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PublishLambdaVersionPSpx3E7LCS6c8SJsa3oqpcyBCuGO2F3Ix0UFPC8to"
            }
          },
          "ProcessLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProcessLambdaVersionefFdaub45s2GORzBSynsfQEPfDhIzNodWi302iD3k"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.ap-northeast-1.",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-pseudo-parameters"
    ],
    "pluginsData": {},
    "functions": {
      "index": {
        "handler": "index.handler",
        "events": [
          {
            "http": {
              "path": "demo/index",
              "method": "get",
              "authorizer": {
                "name": "1_1NS2V20Gy",
                "arn": "arn:aws:cognito-idp:ap-northeast-1:#{AWS::AccountId}:userpool/ap-northeast-1_1NS2V20Gy",
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "serverless-api-dev-index",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs6.10",
        "vpc": {}
      },
      "sign": {
        "handler": "sign.handler",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "demo/sign",
              "authorizer": {
                "name": "1_1NS2V20Gy",
                "arn": "arn:aws:cognito-idp:ap-northeast-1:#{AWS::AccountId}:userpool/ap-northeast-1_1NS2V20Gy",
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "IOT_AWS_REGION": "ap-northeast-1"
        },
        "name": "serverless-api-dev-sign",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs6.10",
        "vpc": {}
      },
      "publish": {
        "handler": "publish.handler",
        "events": [
          {
            "stream": {
              "type": "kinesis",
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][4][\"Resource\"][0]"
              }
            }
          }
        ],
        "name": "serverless-api-dev-publish",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs6.10",
        "vpc": {}
      },
      "process": {
        "handler": "process.handler",
        "events": [
          {
            "stream": {
              "type": "kinesis",
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][5][\"Resource\"][0]"
              }
            }
          }
        ],
        "name": "serverless-api-dev-process",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs6.10",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "WriteKinesisRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "iot.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"
            ]
          }
        },
        "TopicRule": {
          "Type": "AWS::IoT::TopicRule",
          "Properties": {
            "TopicRulePayload": {
              "RuleDisabled": false,
              "Sql": "SELECT * FROM 'myTopic'",
              "Actions": [
                {
                  "Kinesis": {
                    "RoleArn": {
                      "Fn::GetAtt": [
                        "WriteKinesisRole",
                        "Arn"
                      ]
                    },
                    "StreamName": "serverless-api-stream"
                  }
                }
              ]
            }
          }
        },
        "KinesisStream": {
          "Type": "AWS::Kinesis::Stream",
          "Properties": {
            "Name": "serverless-api-stream",
            "ShardCount": 1
          }
        },
        "usersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "serverless-api-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        }
      },
      "Outputs": {}
    },
    "artifact": "/Users/musashi.sakamoto/Desktop/serverless-template/api/.serverless/serverless-api.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/serverless-api/dev/1536654814335-2018-09-11T08:33:34.335Z",
    "artifact": "serverless-api.zip"
  }
}