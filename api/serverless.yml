service: serverless-api

package:
  exclude:
    - node_modules/**
  
plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: ap-northeast-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  index:
    handler: index.handler
    events:
      - http:
          path: demo/index
          method: get
          authorizer:
            arn: "arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${cf:serverless-cognito-dev.UserPoolId}"
          cors: true

  process:
    handler: process.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt: [KinesisStream, Arn]
          batchSize: 100
          startingPosition: TRIM_HORIZON

  iot:
    handler: ios.handler
    events:
      - iot:
          sql: "SELECT * FROM 'topic'"

resources:
  Resources:
    KinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:service}-stream
        ShardCount: 1
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1