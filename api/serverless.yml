service: serverless-api
  
plugins:
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: ap-northeast-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    IOT_ENDPOINT_HOST: 'a1oyblg053arn8.iot.ap-northeast-1.amazonaws.com'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - iot:Connect
        - iot:Publish
        - iot:Subscribe
        - iot:Receive
      Resource: "*"

functions:
  index:
    handler: index.handler
    events:
      - http:
          path: demo/index
          method: get
          authorizer:
            arn: "arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${cf:serverless-cognito-dev.UserPoolId}"
          cors: true

  sign:
    handler: sign.handler
    events:
      - http:
          method: get
          path: demo/sign
          authorizer:
            arn: "arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${cf:serverless-cognito-dev.UserPoolId}"
          cors: true
    environment:
      IOT_AWS_REGION: 'ap-northeast-1'
  
  publish:
    handler: publish.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt: [KinesisStream, Arn]

  process:
    handler: process.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt: [KinesisStream, Arn]

resources:
  Resources:
    WriteKinesisRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "iot.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
    TopicRule:
      Type: AWS::IoT::TopicRule
      Properties:
        TopicRulePayload:
          RuleDisabled: false
          Sql: "SELECT * FROM 'myTopic'"
          Actions:
            -
              Kinesis:
                RoleArn:
                  Fn::GetAtt:
                    - "WriteKinesisRole"
                    - "Arn"
                StreamName: ${self:service}-stream
    KinesisStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:service}-stream
        ShardCount: 1
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1